{"version":3,"file":"rules-editor.js","sources":["../src/ace-wrapper.js","../src/engine-wrapper.js","../src/default_highlight_rules.js","../src/default_fold.js","../src/debounce.js","../src/default_mode.js","../src/resource_highlight_rules.js","../src/resource_fold.js","../src/resource_mode.js","../src/code-editor.js","../src/dynamic-mode.js"],"sourcesContent":["import ace from \"ace-builds/src-noconflict/ace.js\";\n//const ace = window.ace\nimport {\n    Range,\n    EditSession,\n    UndoManager,\n} from \"ace-builds/src-noconflict/ace.js\";\n//const { Range, EditSession, UndoManager } = ace\nimport \"ace-builds/src-noconflict/theme-cobalt.js\";\nimport \"ace-builds/src-noconflict/theme-merbivore_soft.js\";\nimport \"ace-builds/src-noconflict/theme-monokai.js\";\nimport \"ace-builds/src-noconflict/theme-tomorrow_night_blue.js\";\nimport \"ace-builds/src-noconflict/theme-twilight.js\";\nimport \"ace-builds/src-noconflict/theme-solarized_light.js\";\nimport \"ace-builds/src-noconflict/theme-ambiance.js\";\nimport \"ace-builds/src-noconflict/theme-chrome.js\";\nimport \"ace-builds/src-noconflict/theme-textmate.js\";\nimport \"ace-builds/webpack-resolver\";\n\nconst path = \"ace-builds/src-noconflict/\";\n\nace.config.set(\"basePath\", path);\n\nconst TextHighlightRules = ace.require(\n    \"ace/mode/text_highlight_rules\"\n).TextHighlightRules;\n\nconst TextMode = ace.require(\"ace/mode/text\").Mode;\nconst BaseFoldMode = ace.require(\"ace/mode/folding/fold_mode\").FoldMode;\nconst TokenIterator = ace.require(\"ace/token_iterator\").TokenIterator;\n// console.log(TextMode);\n// const JSONMode = ace.require(\"ace/mode/json\").Mode;\nconst Themes = {\n    light: [\"Solarized Light\", \"Ambience\", \"Chrome\", \"Textmate\"],\n    dark: [\n        \"Cobalt\",\n        \"Merbivore Soft\",\n        \"Monokai\",\n        \"Tomorrow night blue\",\n        \"Twilight\",\n    ],\n    // default: ace.require('ace/theme/ambiance'),\n};\n\n// import modes that you want to include into your main bundle\n// import 'ace-builds/src-noconflict/mode-javascript'\n// import webpack resolver to dynamically load modes, you need to install file-loader for this to work!\n// import 'ace-builds/webpack-resolver'\n\n// if you want to allow dynamic loading of only a few modules use setModuleUrl for each of them manually\n// import jsWorkerUrl from 'file-loader!../../build/src-noconflict/worker-javascript';\n// ace.config.setModuleUrl('ace/mode/javascript_worker', jsWorkerUrl)\n\n// import {Mode as JSMode} from '../../build/src-noconflict/mode-javascript'\n// editor.setMode( new JSMode())\n\n// const EditSession = ace.EsitSession //ace.require('ace/edit_session').EditSession\n// const UndoManager = ace.UndoManager //ace.require('ace/undomanager').UndoManager\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\n\n// const TextMode = require('ace-builds/src-noconflict/mode-text').Mode\n// import * as TextNode from 'ace-builds/src-noconflict/mode-text'\n\nexport {\n    ace,\n    Range,\n    EditSession,\n    UndoManager,\n    BaseFoldMode,\n    TokenIterator,\n    TextHighlightRules,\n    TextMode,\n    // JSONMode,\n    Themes,\n};\n","// import { ResParser, Parser, Keywords } from 'rules-engine'\r\nimport { Rules } from \"rules-engine\";\r\n\r\nRules.init([\"fr\", \"de\"]);\r\n\r\nexport default Rules;\r\n","/* jslint esversion:8 */\r\nimport * as wrapper from \"./ace-wrapper\";\r\nimport Rules from \"./engine-wrapper\";\r\nconst TextHighlightRules = wrapper.TextHighlightRules;\r\n// var rules = null;\r\nconst mode = \"ace/mode/kbf\";\r\n\r\nclass HighlightRules extends TextHighlightRules {\r\n    constructor(language) {\r\n        super();\r\n        this.keywords = {};\r\n        this.rules = new Rules(language, mode);\r\n        this.setLanguage(language);\r\n    }\r\n    getRules() {\r\n        return {\r\n            start: [\r\n                {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\/.*$/,\r\n                },\r\n                {\r\n                    token: \"comment\", // multi line comment\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\",\r\n                },\r\n                {\r\n                    token: \"string\", // character\r\n                    regex: /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/,\r\n                },\r\n                { token: \"string\", regex: \"`\", next: \"string\" },\r\n                { token: \"string\", regex: \"'\", next: \"qstring\" },\r\n                {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: \"0[xX][0-9a-fA-F]+\\\\b\",\r\n                },\r\n                {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/,\r\n                },\r\n                {\r\n                    token: \"punctuation.operator\",\r\n                    regex: /\\?|\\:|\\,|\\;|\\./,\r\n                },\r\n                {\r\n                    token: \"paren.lparen\",\r\n                    regex: \"[[({]\",\r\n                },\r\n                {\r\n                    token: \"paren.rparen\",\r\n                    regex: \"[\\\\])}]\",\r\n                },\r\n                {\r\n                    token: \"text\",\r\n                    regex: /\\s+/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: /[-+%=<>*]|[~:,.&!^]/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: \"abs sign ceil floor trunc frac acos asin atan cos sin tan cosh sinh tanh exp log log10 sqrt pi\"\r\n                        .split(\" \")\r\n                        .join(\"|\"),\r\n                },\r\n                {\r\n                    token: (value) => {\r\n                        const found = this.keywordEntries.find((entry) => {\r\n                            return (\r\n                                entry[1].toLowerCase() === value.toLowerCase()\r\n                            );\r\n                        });\r\n                        if (found) {\r\n                            switch (found[0]) {\r\n                                case \"TRUE\":\r\n                                case \"FALSE\":\r\n                                case \"YES\":\r\n                                case \"NO\":\r\n                                    return \"constant.language.boolean\";\r\n                                case \"OR\":\r\n                                case \"AND\":\r\n                                case \"IF\":\r\n                                case \"ELSE\":\r\n                                case \"ELSEIF\":\r\n                                case \"THEN\":\r\n                                    return \"keyword.control\";\r\n                                case \"DIGIT\":\r\n                                case \"TEXT\":\r\n                                case \"MENU\":\r\n                                case \"NUMBER\":\r\n                                    return \"constant.language\";\r\n                                default:\r\n                                    return \"keyword.other\";\r\n                            }\r\n                        } else {\r\n                            return \"text\";\r\n                        }\r\n                    },\r\n                    regex: new RegExp(/\\b\\w+\\b/),\r\n                },\r\n                {\r\n                    caseInsensitive: true,\r\n                },\r\n                // this.keywordRule\r\n            ],\r\n            qstring: [\r\n                { token: \"constant.language.escape\", regex: /''/ },\r\n                { token: \"string\", regex: \"'\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            string: [\r\n                { token: \"constant.language.escape\", regex: /``/ },\r\n                { token: \"string\", regex: \"`\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            comment: [\r\n                {\r\n                    token: \"comment\", // closing comment\r\n                    regex: \"\\\\*\\\\/\",\r\n                    next: \"start\",\r\n                },\r\n                {\r\n                    defaultToken: \"comment\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n    // Set language definition dynamically at run time\r\n    setLanguage(language) {\r\n        this.keywords = this.rules.getKeywords();\r\n        if (!this.keywords) {\r\n            throw new Error(\"Language not supported yet: \" + language || \"\");\r\n        }\r\n        this.keywordEntries = Object.entries(this.keywords);\r\n        this.$rules = this.getRules();\r\n        this.normalizeRules();\r\n        // this.embedRules(DocCommentHighlightRules, \"doc-\", [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    }\r\n}\r\n\r\nexport default HighlightRules;\r\n","/* jslint esversion:6 */\r\nimport * as wrapper from './ace-wrapper'\r\nconst {\r\n  Range,\r\n  BaseFoldMode,\r\n  TokenIterator,\r\n} = wrapper\r\n// ace.config.set('basePath', '../node_mdules/ace-builds/src-noconflict')\r\n// ace.config.set('basePath', '../lib/ace-builds/src-noconflict')\r\n// require('ace-builds/webpack-resolver')\r\n// const Range = ace.Range\r\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\r\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\r\nconst fold = {\r\n  en: {\r\n    foldingStartMarker: /\\b^\\s*(?:rule|prompt|summary)\\b/i,\r\n    foldingStopMarker: /\\b^\\s*(?:prompt|rule|max|min|text|digit|yes\\/no)\\b/ig,\r\n    foldingStopMenu: /\\b^\\s*(?:max|min|text|digit|yes\\/no)\\b/ig,\r\n  },\r\n  fr: {\r\n    foldingStartMarker: /\\b^\\s*(?:rule|prompt|summary)\\b/i,\r\n    foldingStopMarker: /\\b^\\s*(?:prompt|rule|max|min|text|digit|yes\\/no)\\b/ig,\r\n    foldingStopMenu: /\\b^\\s*(?:max|min|text|digit|yes\\/no)\\b/ig,\r\n  },\r\n}\r\n\r\nexport default class extends BaseFoldMode {\r\n  constructor () {\r\n    super()\r\n    // regular expressions that identify starting and stopping points\r\n    this.foldingStartMarker = fold.en.foldingStartMarker\r\n    this.foldingStopMarker = fold.en.foldingStopMarker\r\n    this.foldingStopMenu = fold.en.foldingStopMenu\r\n\r\n    this.getFoldWidgetRange = (session, _foldStyle, row) => {\r\n      const lang = session.language\r\n      var line = session.getLine(row)\r\n      switch (lang) {\r\n      default:\r\n        this.foldingStartMarker = fold[lang].foldingStartMarker // /\\b^\\s*(?:rule|prompt|summary|if|then|else)\\b/;\r\n        this.foldingStopMarker = fold[lang].foldingStopMarker /// \\b^\\s*(?:rule|prompt)\\b/;\r\n        this.foldingStopMenu = fold[lang].foldingStopMenu\r\n      }\r\n      var matchStart = line.match(this.foldingStartMarker)\r\n      if (matchStart) {\r\n        // var i = matchStart.index;\r\n        // if (match[0]) {\r\n        var position = { row: row, column: line.length }\r\n        var iterator = new TokenIterator(session, position.row, position.column)\r\n        var token = iterator.getCurrentToken()\r\n        var seek = this.foldingStopMarker\r\n\r\n        while (token) {\r\n          if (token.value.match(seek)) {\r\n            const currentRow = iterator.getCurrentTokenRow()\r\n            return Range.fromPoints(position, {\r\n              row: token.value.match(this.foldingStopMenu) ? currentRow : currentRow - 1,\r\n              column: iterator.getCurrentTokenColumn(),\r\n            })\r\n          }\r\n          token = iterator.stepForward()\r\n        }\r\n        // }\r\n      }\r\n      // test each line, and return a range of segments to collapse\r\n      return null\r\n    }\r\n  }\r\n}\r\n","function debounce (func, wait, immediate) {\r\n  var timeout\r\n  return function () {\r\n    var context = this; var args = arguments\r\n    var later = function () {\r\n      timeout = null\r\n      if (!immediate) func.apply(context, args)\r\n    }\r\n    var callNow = immediate && !timeout\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(later, wait)\r\n    if (callNow) func.apply(context, args)\r\n  }\r\n}\r\n\r\nexport default debounce\r\n\r\n/* Usage\r\nvar myEfficientFn = debounce(function() {\r\n\t// All the taxing stuff you do\r\n}, 250);\r\n\r\nwindow.addEventListener('resize', myEfficientFn);\r\n*/\r\n","/* jslint esversion:8 */\r\nimport { TextMode } from \"./ace-wrapper\";\r\n\r\nimport Rules from \"./engine-wrapper\";\r\nimport HighlightRules from \"./default_highlight_rules\";\r\nimport DefaultFoldMode from \"./default_fold\";\r\nimport debounce from \"./debounce\";\r\n// const ace = require('ace-builds/src-noconflict/ace')\r\n// ace.config.set('basePath', '../node_mdules/ace-builds/src-noconflict')\r\n// const TextMode = ace.require('ace/mode/text').Mode\r\n\r\nexport default class extends TextMode {\r\n    constructor(editor, watch = true) {\r\n        super();\r\n        this.lineCommentStart = \"//\";\r\n        this.blockComment = { start: \"/*\", end: \"*/\" };\r\n        this.editor = editor;\r\n        this.language = editor.session.language;\r\n        this.$highlightRules = new HighlightRules(this.language);\r\n        // If static highlighter, do not watch for changes\r\n        this.$id = \"ace/mode/kbf\";\r\n        this.rules = new Rules(this.editor.session.language || \"en\", this.$id);\r\n        if (watch) this.watch();\r\n    }\r\n\r\n    watch() {\r\n        this.foldingRules = new DefaultFoldMode();\r\n        this.editor.on(\r\n            \"change\",\r\n            debounce(async () => {\r\n                const value = this.editor.getValue();\r\n                try {\r\n                    const errors = await this.rules.parse(value);\r\n                    this.editor.session.clearAnnotations();\r\n                    this.editor.session.setAnnotations(errors);\r\n                } catch (e) {\r\n                    // this.editor.session.setAnnotations(errors)\r\n                    console.log(e);\r\n                }\r\n            }, 1000)\r\n        );\r\n    }\r\n}\r\n","/* jslint esversion:8 */\r\nimport * as wrapper from \"./ace-wrapper\";\r\nconst { TextHighlightRules } = wrapper;\r\n// const TextHighlightRules = ace.require('ace/mode/text_highlight_rules').TextHighlightRules\r\n\r\nclass HighlightRules extends TextHighlightRules {\r\n    constructor() {\r\n        super();\r\n        this.$rules = {\r\n            start: [\r\n                {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\/.*$/,\r\n                },\r\n                {\r\n                    token: \"comment\", // multi line comment\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\",\r\n                },\r\n                { token: \"string\", regex: \"`\", next: \"string\" },\r\n                { token: \"string\", regex: \"'\", next: \"qstring\" },\r\n                {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: /0[xX][0-9a-fA-F]+\\b/,\r\n                },\r\n                {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: /\\W[-+%=<>*]\\W|\\*\\*|[~:,.&$]|->*?|=>/,\r\n                },\r\n                {\r\n                    token: \"paren.lparen\",\r\n                    regex: /[\\[(\\{]/,\r\n                },\r\n                {\r\n                    token: \"paren.rparen\",\r\n                    regex: /[\\])\\}]/,\r\n                },\r\n\r\n                {\r\n                    token: \"keyword\",\r\n                    regex: /[^=]+(?:[=:])/,\r\n                },\r\n                {\r\n                    token: \"punctuation.operator\",\r\n                    regex: /\\?[:,;=\\.]/,\r\n                },\r\n                {\r\n                    caseInsensitive: true,\r\n                },\r\n            ],\r\n            qstring: [\r\n                { token: \"constant.language.escape\", regex: /''/ },\r\n                { token: \"string\", regex: \"'\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            string: [\r\n                { token: \"constant.language.escape\", regex: /``/ },\r\n                { token: \"string\", regex: \"`\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            comment: [\r\n                {\r\n                    token: \"comment\", // closing comment\r\n                    regex: /\\*\\//,\r\n                    next: \"start\",\r\n                },\r\n                {\r\n                    defaultToken: \"comment\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n// \"variable.language\": \"this\",\r\n// \"constant.language\": \"TRUE FALSE NULL SPACE\",\r\nexport default new HighlightRules();\r\n","/* jslint esversion:6 */\r\nimport * as wrapper from './ace-wrapper'\r\nconst {\r\n  Range,\r\n  BaseFoldMode,\r\n  TokenIterator,\r\n} = wrapper\r\n\r\n// const Range = ace.Range\r\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\r\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\r\n\r\nexport default class extends BaseFoldMode {\r\n  constructor () {\r\n    super()\r\n    // regular expressions that identify starting and stopping points\r\n    this.foldingStartMarker = /^\\s*\\/\\/[^-]+$/\r\n    this.foldingStopMarker = /^\\s*--/\r\n\r\n    this.getFoldWidgetRange = (session, _foldStyle, row) => {\r\n      var line = session.getLine(row)\r\n      var matchStart = line.match(this.foldingStartMarker)\r\n      if (matchStart) {\r\n        var position = { row: row, column: line.length }\r\n        var iterator = new TokenIterator(session, position.row, position.column)\r\n        var token = iterator.getCurrentToken()\r\n        var seek = this.foldingStopMarker\r\n\r\n        while (token) {\r\n          if (token.value.match(seek)) {\r\n            const currentRow = iterator.getCurrentTokenRow()\r\n            return Range.fromPoints(position, {\r\n              row: currentRow,\r\n              column: iterator.getCurrentTokenColumn(),\r\n            })\r\n          }\r\n          token = iterator.stepForward()\r\n        }\r\n        // }\r\n      }\r\n      // test each line, and return a range of segments to collapse\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { TextMode } from \"./ace-wrapper\";\r\n// import { ResParser as Parser } from './engine-wrapper'\r\n// import { rules as Rule } from './engine-wrapper'\r\nimport Rules from \"./engine-wrapper\";\r\nimport debounce from \"./debounce\";\r\nimport HighlightRules from \"./resource_highlight_rules\";\r\nimport DefaultFoldMode from \"./resource_fold\";\r\n// const ace = require('ace-builds/src-noconflict/ace')\r\n// const TextMode = ace.require('ace/mode/text').Mode\r\nexport default class extends TextMode {\r\n    constructor(editor, onlyHighlight = false) {\r\n        super();\r\n        this.$highlightRules = this.HighlightRules = HighlightRules;\r\n        this.foldingRules = new DefaultFoldMode();\r\n        this.editor = editor;\r\n        this.language = editor.session.language;\r\n        this.$id = \"ace/mode/res\";\r\n        this.rules = new Rules(this.editor.session.language || \"en\", this.$id);\r\n        // If static highlighter, do not watch for changes\r\n        if (!onlyHighlight) this.watch();\r\n    }\r\n\r\n    watch() {\r\n        // this.parser = new Parser(this.editor.session.language || 'en')\r\n        // this.parser.on('done', (errors) => {\r\n        // this.editor.session.setAnnotations(errors)\r\n        // })\r\n        this.editor.on(\r\n            \"change\",\r\n            debounce(async () => {\r\n                const value = this.editor.getValue();\r\n                try {\r\n                    const errors = await this.rules.parse(value);\r\n                    this.editor.session.clearAnnotations();\r\n                    this.editor.session.setAnnotations(errors);\r\n                } catch (e) {\r\n                    // this.editor.session.setAnnotations(errors)\r\n                    console.log(e);\r\n                }\r\n            }, 1000)\r\n        );\r\n    }\r\n}\r\n","import { ace, EditSession, UndoManager, Themes } from \"./ace-wrapper\";\n\nimport Mode from \"./default_mode\";\nimport ResourceMode from \"./resource_mode\";\nimport dynamicMode from \"./dynamic-mode\";\n\nexport class CodeEditor {\n    constructor() {\n        if (!CodeEditor.instance) {\n            CodeEditor.instance = this;\n        }\n        this.language = \"en\";\n        this.editors = [];\n        this.editor = null;\n        this.defaults = {\n            fontSize: 18,\n            fontName: \"Courier New\",\n            theme: \"ace/theme/tomorrow_night_blue\",\n        };\n        this.theme = this.defaults.theme; // 'ace/theme/tomorrow_night_blue'\n        this.fontSize = this.defaults.fontSize;\n        this.fontName = this.defaults.fontName;\n\n        return CodeEditor.instance;\n    }\n\n    setHighlightRule(editor, fileName) {\n        // return this.setHighlightRules(editor, mode)\n        const ext = fileName\n            ? fileName.substring(fileName.indexOf(\".\"))\n            : \".kbf\";\n        let defaultMode = null;\n        if (ext === \".kbf\") {\n            defaultMode = new Mode(editor);\n        } else if (ext === \".res\") {\n            defaultMode = new ResourceMode(editor);\n        } else {\n            const modePath = dynamicMode(fileName);\n            const DynamicMode = ace.require(modePath).Mode;\n            editor.session.setMode(new DynamicMode());\n        }\n\n        editor.session.setMode(defaultMode, () => {\n            editor.session.bgTokenizer.start(0);\n        });\n    }\n\n    edit(element, options = {}) {\n        let el = null;\n        if (typeof element === \"string\") {\n            el =\n                document.getElementById(element) ||\n                document.querySelector(element);\n        } else if (element && (element.id || element.tagName)) {\n            el = element;\n        }\n        if (!el) {\n            console.error(\"Invalid container reference: \" + el);\n            return null;\n        }\n        if (typeof options !== \"object\") {\n            console.error(\"Invalid options parameter : \" + options);\n            return null;\n        }\n\n        let editor = null;\n        const session = new EditSession(options.text ? options.text : \"\");\n        session.language = options.language ? options.language : this.language;\n        session.setUndoManager(new UndoManager());\n\n        const editorSettings = {\n            fontSize: options.fontSize || this.fontSize,\n            fontFamily: options.fontName || this.fontName,\n            theme: options.theme || this.theme,\n            showLineNumbers: true,\n            readOnly: false,\n            showGutter: true,\n            animatedScroll: true,\n            minLines: 5,\n            maxLines: \"auto\",\n            selectionStyle: \"row\",\n            highlightActiveLine: true,\n            showPrintMargin: true,\n        };\n\n        editor = ace.edit(el, Object.assign(editorSettings, options));\n        editor.data = options.data || {};\n        editor.setSession(session);\n        editor.renderer.setScrollMargin(10, 10, 10, 10);\n        editor.$blockScrolling = Infinity;\n        editor.setOptions({\n            scrollPastEnd: 0.9,\n            autoScrollEditorIntoView: true,\n        });\n        editor.focus();\n\n        // editor.select()\n        // editor.gotoLine(0)\n        // editor.blur(true)\n        // this.editor.session.selection.on('changeSelection', function(){});\n        // this.editor.session.selection.on('changeCursor', function(){});\n        this.setHighlightRule(editor, options.fileName);\n        this.editors.push(editor);\n        this.editor = editor;\n\n        setTimeout(() => {\n            // let sel = editor.selection\n            // sel.clearSelection()\n            editor.clearSelection();\n        }, 0);\n\n        return editor;\n    }\n\n    reset() {\n        this.FontSize = this.defaults.fontSize;\n        this.FontName = this.defaults.fontName;\n        this.Theme = this.defaults.theme;\n    }\n    destroy() {\n        this.editors.forEach((editor) => {\n            editor.destroy();\n            editor.container.remove();\n        });\n    }\n    get Text() {\n        return this.editor?.getValue() || \"\";\n    }\n    set Text(val) {\n        return this.editor?.setValue(val);\n    }\n    get ThemeList() {\n        return Themes;\n    }\n    set Theme(val) {\n        if (!val) {\n            console.log(\"Theme not set\");\n            return;\n        }\n        let theme = val && val.toLowerCase();\n        if (\n            this.Themes.dark.find(\n                (item) => item.toLowerCase() === theme.toLocaleLowerCase()\n            ) ||\n            this.Themes.light.find(\n                (item) => item.toLowerCase() === theme.toLocaleLowerCase()\n            )\n        ) {\n            this.theme = \"ace/theme/\" + theme.replace(/\\s+/g, \"_\");\n            this.editors.forEach((editor) => editor.setTheme(this.theme));\n        }\n    }\n    get Theme() {\n        return this.theme;\n    }\n    get FontName() {\n        return this.fontName;\n    }\n    set FontName(value) {\n        this.fontName = value;\n    }\n    get FontSize() {\n        return this.fontSize;\n    }\n    set FontSize(value) {\n        this.fontSize = value;\n    }\n    get Editors() {\n        return this.editors;\n    }\n    get Editor() {\n        return this.editor;\n    }\n    set Editor(ed) {\n        this.editor = ed;\n    }\n}\nconst instance = new CodeEditor();\n//Object.freeze(instance);\n\n/*  setHighlightRules (editor, language) {\n    const lang = language || 'text'\n    const session = editor.session\n    editor.session.setMode('ace/mode/' + lang, function () {\n    const rules = session.$mode.$highlightRules.getRules()\n      for (let stateName in rules) {\n        if (Object.prototype.hasOwnProperty.call(rules, stateName)) {\n          rules[stateName].unshift({\n            token: 'keyword',\n            regex: /TITLE/,\n          }, {\n            token: 'constant',\n            regex: /GOAL/,\n          })\n        }\n      }\n      // console.log(session.$mode)\n      // force recreation of tokenizer\n      session.$mode.$tokenizer = null\n      session.bgTokenizer.setTokenizer(session.$mode.getTokenizer())\n      // force re-highlight whole document\n      session.bgTokenizer.start(0)\n    })\n  } */\nexport default instance;\n","function autoImplementedMode (filename) {\r\n  var ext = filename.split('.').pop()\r\n  var prefix = \"ace/mode/\"\r\n\r\n  if (!ext) {\r\n    return prefix + \"text\"\r\n  }\r\n\r\n  /**\r\n   *  Functional, but inefficient if you want to write it by yourself ....\r\n   */\r\n  switch (ext) {\r\n    case \"js\":\r\n      return prefix + \"javascript\"\r\n    case \"json\":\r\n      return prefix + \"json\"\r\n    default: 'text'\r\n  }\r\n}\r\n\r\n\r\n// var filename = \"myfile.js\"\r\n// In this case \"ace/mode/javascript\"\r\n// var mode = autoImplementedMode(filename)\r\n// editor.getSession().setMode(mode)\r\nexport default autoImplementedMode\r\n"],"names":["ace","config","set","TextHighlightRules","require","TextMode","Mode","BaseFoldMode","FoldMode","TokenIterator","Themes","light","dark","Rules","init","wrapper","HighlightRules","constructor","language","super","this","keywords","rules","setLanguage","getRules","start","token","regex","next","split","join","value","found","keywordEntries","find","entry","toLowerCase","RegExp","caseInsensitive","qstring","defaultToken","string","comment","getKeywords","Error","Object","entries","$rules","normalizeRules","Range","fold","en","foldingStartMarker","foldingStopMarker","foldingStopMenu","fr","DefaultFoldMode$1","getFoldWidgetRange","session","_foldStyle","row","lang","line","getLine","match","position","column","length","iterator","getCurrentToken","seek","currentRow","getCurrentTokenRow","fromPoints","getCurrentTokenColumn","stepForward","debounce","func","wait","immediate","timeout","context","args","arguments","callNow","clearTimeout","setTimeout","apply","editor","watch","lineCommentStart","blockComment","end","$highlightRules","$id","_this","foldingRules","DefaultFoldMode","on","async","getValue","errors","parse","clearAnnotations","setAnnotations","e","console","log","HighlightRules$1","onlyHighlight","CodeEditor","instance","editors","defaults","fontSize","fontName","theme","setHighlightRule","fileName","ext","substring","indexOf","defaultMode","ResourceMode","modePath","filename","pop","prefix","dynamicMode","DynamicMode","setMode","bgTokenizer","edit","element","options","el","document","getElementById","querySelector","id","tagName","error","EditSession","text","setUndoManager","UndoManager","assign","fontFamily","showLineNumbers","readOnly","showGutter","animatedScroll","minLines","maxLines","selectionStyle","highlightActiveLine","showPrintMargin","data","setSession","renderer","setScrollMargin","$blockScrolling","Infinity","setOptions","scrollPastEnd","autoScrollEditorIntoView","focus","push","clearSelection","reset","FontSize","FontName","Theme","destroy","forEach","container","remove","Text","_this$editor","val","_this$editor2","setValue","ThemeList","item","toLocaleLowerCase","replace","setTheme","Editors","Editor","ed"],"mappings":"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"}