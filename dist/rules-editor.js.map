{"version":3,"file":"rules-editor.js","sources":["../src/ace-wrapper.js","../src/engine-wrapper.js","../src/default_highlight_rules.js","../src/default_fold.js","../src/debounce.js","../src/default_mode.js","../src/resource_highlight_rules.js","../src/resource_fold.js","../src/resource_mode.js","../src/code-editor.js","../src/dynamic-mode.js"],"sourcesContent":["// import ace from \"ace-builds\";\r\nconst ace = window.ace\r\n// import { Range, EditSession, UndoManager } from \"ace-builds\";\r\nconst { Range, EditSession, UndoManager } = ace\r\n/*import \"ace-builds/src-noconflict/theme-cobalt.js\";\r\nimport \"ace-builds/src-noconflict/theme-merbivore_soft.js\";\r\nimport \"ace-builds/src-noconflict/theme-monokai.js\";\r\nimport \"ace-builds/src-noconflict/theme-tomorrow_night_blue.js\";\r\nimport \"ace-builds/src-noconflict/theme-twilight.js\";\r\nimport \"ace-builds/src-noconflict/theme-solarized_light.js\";\r\nimport \"ace-builds/src-noconflict/theme-ambiance.js\";\r\nimport \"ace-builds/src-noconflict/theme-chrome.js\";\r\nimport \"ace-builds/src-noconflict/theme-textmate.js\";\r\nimport \"ace-builds/webpack-resolver\";\r\nconst path = \"ace-builds/src-noconflict/\";\r\nace.config.set(\"basePath\", path);*/\r\nconst TextHighlightRules = ace.require(\r\n    \"ace/mode/text_highlight_rules\"\r\n).TextHighlightRules;\r\n\r\nconst TextMode = ace.require(\"ace/mode/text\").Mode;\r\nconst BaseFoldMode = ace.require(\"ace/mode/folding/fold_mode\").FoldMode;\r\nconst TokenIterator = ace.require(\"ace/token_iterator\").TokenIterator;\r\n// console.log(TextMode);\r\n// const JSONMode = ace.require(\"ace/mode/json\").Mode;\r\nconst Themes = {\r\n    light: [\"Solarized Light\", \"Ambience\", \"Chrome\", \"Textmate\"],\r\n    dark: [\r\n        \"Cobalt\",\r\n        \"Merbivore Soft\",\r\n        \"Monokai\",\r\n        \"Tomorrow night blue\",\r\n        \"Twilight\",\r\n    ],\r\n    // default: ace.require('ace/theme/ambiance'),\r\n};\r\n\r\n// import modes that you want to include into your main bundle\r\n// import 'ace-builds/src-noconflict/mode-javascript'\r\n// import webpack resolver to dynamically load modes, you need to install file-loader for this to work!\r\n// import 'ace-builds/webpack-resolver'\r\n\r\n// if you want to allow dynamic loading of only a few modules use setModuleUrl for each of them manually\r\n// import jsWorkerUrl from 'file-loader!../../build/src-noconflict/worker-javascript';\r\n// ace.config.setModuleUrl('ace/mode/javascript_worker', jsWorkerUrl)\r\n\r\n// import {Mode as JSMode} from '../../build/src-noconflict/mode-javascript'\r\n// editor.setMode( new JSMode())\r\n\r\n// const EditSession = ace.EsitSession //ace.require('ace/edit_session').EditSession\r\n// const UndoManager = ace.UndoManager //ace.require('ace/undomanager').UndoManager\r\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\r\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\r\n\r\n// const TextMode = require('ace-builds/src-noconflict/mode-text').Mode\r\n// import * as TextNode from 'ace-builds/src-noconflict/mode-text'\r\n\r\nexport {\r\n    ace,\r\n    Range,\r\n    EditSession,\r\n    UndoManager,\r\n    BaseFoldMode,\r\n    TokenIterator,\r\n    TextHighlightRules,\r\n    TextMode,\r\n    // JSONMode,\r\n    Themes,\r\n};\r\n","// import { ResParser, Parser, Keywords } from 'rules-engine'\r\nimport { Rules } from \"rules-engine/src/Rules\";\r\n\r\nRules.init([\"fr\", \"de\"]);\r\n\r\nexport default Rules;\r\n","/* jslint esversion:8 */\r\nimport * as wrapper from \"./ace-wrapper\";\r\nimport Rules from \"./engine-wrapper\";\r\nconst TextHighlightRules = wrapper.TextHighlightRules;\r\n// var rules = null;\r\nconst mode = \"ace/mode/kbf\";\r\n\r\nclass HighlightRules extends TextHighlightRules {\r\n    constructor(language) {\r\n        super();\r\n        this.keywords = {};\r\n        this.rules = new Rules(language, mode);\r\n        this.setLanguage(language);\r\n    }\r\n    getRules() {\r\n        return {\r\n            start: [\r\n                {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\/.*$/,\r\n                },\r\n                {\r\n                    token: \"comment\", // multi line comment\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\",\r\n                },\r\n                {\r\n                    token: \"string\", // character\r\n                    regex: /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/,\r\n                },\r\n                { token: \"string\", regex: \"`\", next: \"string\" },\r\n                { token: \"string\", regex: \"'\", next: \"qstring\" },\r\n                {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: \"0[xX][0-9a-fA-F]+\\\\b\",\r\n                },\r\n                {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/,\r\n                },\r\n                {\r\n                    token: \"punctuation.operator\",\r\n                    regex: /\\?|\\:|\\,|\\;|\\./,\r\n                },\r\n                {\r\n                    token: \"paren.lparen\",\r\n                    regex: \"[[({]\",\r\n                },\r\n                {\r\n                    token: \"paren.rparen\",\r\n                    regex: \"[\\\\])}]\",\r\n                },\r\n                {\r\n                    token: \"text\",\r\n                    regex: /\\s+/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: /[-+%=<>*]|[~:,.&!^]/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: \"abs sign ceil floor trunc frac acos asin atan cos sin tan cosh sinh tanh exp log log10 sqrt pi\"\r\n                        .split(\" \")\r\n                        .join(\"|\"),\r\n                },\r\n                {\r\n                    token: (value) => {\r\n                        const found = this.keywordEntries.find((entry) => {\r\n                            return (\r\n                                entry[1].toLowerCase() === value.toLowerCase()\r\n                            );\r\n                        });\r\n                        if (found) {\r\n                            switch (found[0]) {\r\n                                case \"TRUE\":\r\n                                case \"FALSE\":\r\n                                case \"YES\":\r\n                                case \"NO\":\r\n                                    return \"constant.language.boolean\";\r\n                                case \"OR\":\r\n                                case \"AND\":\r\n                                case \"IF\":\r\n                                case \"ELSE\":\r\n                                case \"ELSEIF\":\r\n                                case \"THEN\":\r\n                                    return \"keyword.control\";\r\n                                case \"DIGIT\":\r\n                                case \"TEXT\":\r\n                                case \"MENU\":\r\n                                case \"NUMBER\":\r\n                                    return \"constant.language\";\r\n                                default:\r\n                                    return \"keyword.other\";\r\n                            }\r\n                        } else {\r\n                            return \"text\";\r\n                        }\r\n                    },\r\n                    regex: new RegExp(/\\b\\w+\\b/),\r\n                },\r\n                {\r\n                    caseInsensitive: true,\r\n                },\r\n                // this.keywordRule\r\n            ],\r\n            qstring: [\r\n                { token: \"constant.language.escape\", regex: /''/ },\r\n                { token: \"string\", regex: \"'\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            string: [\r\n                { token: \"constant.language.escape\", regex: /``/ },\r\n                { token: \"string\", regex: \"`\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            comment: [\r\n                {\r\n                    token: \"comment\", // closing comment\r\n                    regex: \"\\\\*\\\\/\",\r\n                    next: \"start\",\r\n                },\r\n                {\r\n                    defaultToken: \"comment\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n    // Set language definition dynamically at run time\r\n    setLanguage(language) {\r\n        this.keywords = this.rules.getKeywords();\r\n        if (!this.keywords) {\r\n            throw new Error(\"Language not supported yet: \" + language || \"\");\r\n        }\r\n        this.keywordEntries = Object.entries(this.keywords);\r\n        this.$rules = this.getRules();\r\n        this.normalizeRules();\r\n        // this.embedRules(DocCommentHighlightRules, \"doc-\", [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    }\r\n}\r\n\r\nexport default HighlightRules;\r\n","/* jslint esversion:6 */\r\nimport * as wrapper from './ace-wrapper'\r\nconst {\r\n  Range,\r\n  BaseFoldMode,\r\n  TokenIterator,\r\n} = wrapper\r\n// ace.config.set('basePath', '../node_mdules/ace-builds/src-noconflict')\r\n// ace.config.set('basePath', '../lib/ace-builds/src-noconflict')\r\n// require('ace-builds/webpack-resolver')\r\n// const Range = ace.Range\r\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\r\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\r\nconst fold = {\r\n  en: {\r\n    foldingStartMarker: /\\b^\\s*(?:rule|prompt|summary)\\b/i,\r\n    foldingStopMarker: /\\b^\\s*(?:prompt|rule|max|min|text|digit|yes\\/no)\\b/ig,\r\n    foldingStopMenu: /\\b^\\s*(?:max|min|text|digit|yes\\/no)\\b/ig,\r\n  },\r\n  fr: {\r\n    foldingStartMarker: /\\b^\\s*(?:rule|prompt|summary)\\b/i,\r\n    foldingStopMarker: /\\b^\\s*(?:prompt|rule|max|min|text|digit|yes\\/no)\\b/ig,\r\n    foldingStopMenu: /\\b^\\s*(?:max|min|text|digit|yes\\/no)\\b/ig,\r\n  },\r\n}\r\n\r\nexport default class extends BaseFoldMode {\r\n  constructor () {\r\n    super()\r\n    // regular expressions that identify starting and stopping points\r\n    this.foldingStartMarker = fold.en.foldingStartMarker\r\n    this.foldingStopMarker = fold.en.foldingStopMarker\r\n    this.foldingStopMenu = fold.en.foldingStopMenu\r\n\r\n    this.getFoldWidgetRange = (session, _foldStyle, row) => {\r\n      const lang = session.language\r\n      var line = session.getLine(row)\r\n      switch (lang) {\r\n      default:\r\n        this.foldingStartMarker = fold[lang].foldingStartMarker // /\\b^\\s*(?:rule|prompt|summary|if|then|else)\\b/;\r\n        this.foldingStopMarker = fold[lang].foldingStopMarker /// \\b^\\s*(?:rule|prompt)\\b/;\r\n        this.foldingStopMenu = fold[lang].foldingStopMenu\r\n      }\r\n      var matchStart = line.match(this.foldingStartMarker)\r\n      if (matchStart) {\r\n        // var i = matchStart.index;\r\n        // if (match[0]) {\r\n        var position = { row: row, column: line.length }\r\n        var iterator = new TokenIterator(session, position.row, position.column)\r\n        var token = iterator.getCurrentToken()\r\n        var seek = this.foldingStopMarker\r\n\r\n        while (token) {\r\n          if (token.value.match(seek)) {\r\n            const currentRow = iterator.getCurrentTokenRow()\r\n            return Range.fromPoints(position, {\r\n              row: token.value.match(this.foldingStopMenu) ? currentRow : currentRow - 1,\r\n              column: iterator.getCurrentTokenColumn(),\r\n            })\r\n          }\r\n          token = iterator.stepForward()\r\n        }\r\n        // }\r\n      }\r\n      // test each line, and return a range of segments to collapse\r\n      return null\r\n    }\r\n  }\r\n}\r\n","function debounce (func, wait, immediate) {\r\n  var timeout\r\n  return function () {\r\n    var context = this; var args = arguments\r\n    var later = function () {\r\n      timeout = null\r\n      if (!immediate) func.apply(context, args)\r\n    }\r\n    var callNow = immediate && !timeout\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(later, wait)\r\n    if (callNow) func.apply(context, args)\r\n  }\r\n}\r\n\r\nexport default debounce\r\n\r\n/* Usage\r\nvar myEfficientFn = debounce(function() {\r\n\t// All the taxing stuff you do\r\n}, 250);\r\n\r\nwindow.addEventListener('resize', myEfficientFn);\r\n*/\n","/* jslint esversion:8 */\r\nimport { TextMode } from \"./ace-wrapper\";\r\n\r\nimport Rules from \"./engine-wrapper\";\r\nimport HighlightRules from \"./default_highlight_rules\";\r\nimport DefaultFoldMode from \"./default_fold\";\r\nimport debounce from \"./debounce\";\r\n// const ace = require('ace-builds/src-noconflict/ace')\r\n// ace.config.set('basePath', '../node_mdules/ace-builds/src-noconflict')\r\n// const TextMode = ace.require('ace/mode/text').Mode\r\n\r\nexport default class extends TextMode {\r\n    constructor(editor, watch = true) {\r\n        super();\r\n        this.lineCommentStart = \"//\";\r\n        this.blockComment = { start: \"/*\", end: \"*/\" };\r\n        this.editor = editor;\r\n        this.language = editor.session.language;\r\n        this.$highlightRules = new HighlightRules(this.language);\r\n        // If static highlighter, do not watch for changes\r\n        this.$id = \"ace/mode/kbf\";\r\n        this.rules = new Rules(this.editor.session.language || \"en\", this.$id);\r\n        if (watch) this.watch();\r\n    }\r\n\r\n    watch() {\r\n        this.foldingRules = new DefaultFoldMode();\r\n        this.editor.on(\r\n            \"change\",\r\n            debounce(async () => {\r\n                const value = this.editor.getValue();\r\n                try {\r\n                    const errors = await this.rules.parse(value);\r\n                    this.editor.session.clearAnnotations();\r\n                    this.editor.session.setAnnotations(errors);\r\n                } catch (e) {\r\n                    // this.editor.session.setAnnotations(errors)\r\n                    console.log(e);\r\n                }\r\n            }, 1000)\r\n        );\r\n    }\r\n}\r\n","/* jslint esversion:8 */\r\nimport * as wrapper from \"./ace-wrapper\";\r\nconst { TextHighlightRules } = wrapper;\r\n// const TextHighlightRules = ace.require('ace/mode/text_highlight_rules').TextHighlightRules\r\n\r\nclass HighlightRules extends TextHighlightRules {\r\n    constructor() {\r\n        super();\r\n        this.$rules = {\r\n            start: [\r\n                {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\/.*$/,\r\n                },\r\n                {\r\n                    token: \"comment\", // multi line comment\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\",\r\n                },\r\n                { token: \"string\", regex: \"`\", next: \"string\" },\r\n                { token: \"string\", regex: \"'\", next: \"qstring\" },\r\n                {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: /0[xX][0-9a-fA-F]+\\b/,\r\n                },\r\n                {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b/,\r\n                },\r\n                {\r\n                    token: \"keyword.operator\",\r\n                    regex: /\\W[-+%=<>*]\\W|\\*\\*|[~:,.&$]|->*?|=>/,\r\n                },\r\n                {\r\n                    token: \"paren.lparen\",\r\n                    regex: /[\\[(\\{]/,\r\n                },\r\n                {\r\n                    token: \"paren.rparen\",\r\n                    regex: /[\\])\\}]/,\r\n                },\r\n\r\n                {\r\n                    token: \"keyword\",\r\n                    regex: /[^=]+(?:[=:])/,\r\n                },\r\n                {\r\n                    token: \"punctuation.operator\",\r\n                    regex: /\\?[:,;=\\.]/,\r\n                },\r\n                {\r\n                    caseInsensitive: true,\r\n                },\r\n            ],\r\n            qstring: [\r\n                { token: \"constant.language.escape\", regex: /''/ },\r\n                { token: \"string\", regex: \"'\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            string: [\r\n                { token: \"constant.language.escape\", regex: /``/ },\r\n                { token: \"string\", regex: \"`\", next: \"start\" },\r\n                { defaultToken: \"string\" },\r\n            ],\r\n            comment: [\r\n                {\r\n                    token: \"comment\", // closing comment\r\n                    regex: /\\*\\//,\r\n                    next: \"start\",\r\n                },\r\n                {\r\n                    defaultToken: \"comment\",\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n// \"variable.language\": \"this\",\r\n// \"constant.language\": \"TRUE FALSE NULL SPACE\",\r\nexport default new HighlightRules();\r\n","/* jslint esversion:6 */\r\nimport * as wrapper from './ace-wrapper'\r\nconst {\r\n  Range,\r\n  BaseFoldMode,\r\n  TokenIterator,\r\n} = wrapper\r\n\r\n// const Range = ace.Range\r\n// const BaseFoldMode = ace.require('ace/mode/folding/fold_mode').FoldMode\r\n// const TokenIterator = ace.require('ace/token_iterator').TokenIterator\r\n\r\nexport default class extends BaseFoldMode {\r\n  constructor () {\r\n    super()\r\n    // regular expressions that identify starting and stopping points\r\n    this.foldingStartMarker = /^\\s*\\/\\/[^-]+$/\r\n    this.foldingStopMarker = /^\\s*--/\r\n\r\n    this.getFoldWidgetRange = (session, _foldStyle, row) => {\r\n      var line = session.getLine(row)\r\n      var matchStart = line.match(this.foldingStartMarker)\r\n      if (matchStart) {\r\n        var position = { row: row, column: line.length }\r\n        var iterator = new TokenIterator(session, position.row, position.column)\r\n        var token = iterator.getCurrentToken()\r\n        var seek = this.foldingStopMarker\r\n\r\n        while (token) {\r\n          if (token.value.match(seek)) {\r\n            const currentRow = iterator.getCurrentTokenRow()\r\n            return Range.fromPoints(position, {\r\n              row: currentRow,\r\n              column: iterator.getCurrentTokenColumn(),\r\n            })\r\n          }\r\n          token = iterator.stepForward()\r\n        }\r\n        // }\r\n      }\r\n      // test each line, and return a range of segments to collapse\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { TextMode } from \"./ace-wrapper\";\r\n// import { ResParser as Parser } from './engine-wrapper'\r\n// import { rules as Rule } from './engine-wrapper'\r\nimport Rules from \"./engine-wrapper\";\r\nimport debounce from \"./debounce\";\r\nimport HighlightRules from \"./resource_highlight_rules\";\r\nimport DefaultFoldMode from \"./resource_fold\";\r\n// const ace = require('ace-builds/src-noconflict/ace')\r\n// const TextMode = ace.require('ace/mode/text').Mode\r\nexport default class extends TextMode {\r\n    constructor(editor, onlyHighlight = false) {\r\n        super();\r\n        this.$highlightRules = this.HighlightRules = HighlightRules;\r\n        this.foldingRules = new DefaultFoldMode();\r\n        this.editor = editor;\r\n        this.language = editor.session.language;\r\n        this.$id = \"ace/mode/res\";\r\n        this.rules = new Rules(this.editor.session.language || \"en\", this.$id);\r\n        // If static highlighter, do not watch for changes\r\n        if (!onlyHighlight) this.watch();\r\n    }\r\n\r\n    watch() {\r\n        // this.parser = new Parser(this.editor.session.language || 'en')\r\n        // this.parser.on('done', (errors) => {\r\n        // this.editor.session.setAnnotations(errors)\r\n        // })\r\n        this.editor.on(\r\n            \"change\",\r\n            debounce(async () => {\r\n                const value = this.editor.getValue();\r\n                try {\r\n                    const errors = await this.rules.parse(value);\r\n                    this.editor.session.clearAnnotations();\r\n                    this.editor.session.setAnnotations(errors);\r\n                } catch (e) {\r\n                    // this.editor.session.setAnnotations(errors)\r\n                    console.log(e);\r\n                }\r\n            }, 1000)\r\n        );\r\n    }\r\n}\r\n","import { ace, EditSession, UndoManager, Themes } from \"./ace-wrapper\";\r\n\r\nimport Mode from \"./default_mode\";\r\nimport ResourceMode from \"./resource_mode\";\r\nimport dynamicMode from \"./dynamic-mode\";\r\n\r\nclass CodeEditor {\r\n    constructor() {\r\n        if (!CodeEditor.instance) {\r\n            CodeEditor.instance = this;\r\n        }\r\n        this.language = \"en\";\r\n        this.editors = [];\r\n        this.defaults = {\r\n            fontSize: 18,\r\n            fontName: \"Courier New\",\r\n            theme: \"ace/theme/tomorrow_night_blue\",\r\n        };\r\n        this.theme = this.defaults.theme; // 'ace/theme/tomorrow_night_blue'\r\n        this.fontSize = this.defaults.fontSize;\r\n        this.fontName = this.defaults.fontName;\r\n\r\n        return CodeEditor.instance;\r\n    }\r\n\r\n    setHighlightRule(editor, fileName) {\r\n        // return this.setHighlightRules(editor, mode)\r\n        const ext = fileName\r\n            ? fileName.substring(fileName.indexOf(\".\"))\r\n            : \".kbf\";\r\n        let defaultMode = null;\r\n        if (ext === \".kbf\") {\r\n            defaultMode = new Mode(editor);\r\n        } else if (ext === \".res\") {\r\n            defaultMode = new ResourceMode(editor);\r\n        } else {\r\n            const modePath = dynamicMode(fileName);\r\n            const DynamicMode = ace.require(modePath).Mode;\r\n            editor.session.setMode(new DynamicMode());\r\n        }\r\n\r\n        editor.session.setMode(defaultMode, () => {\r\n            editor.session.bgTokenizer.start(0);\r\n        });\r\n    }\r\n\r\n    edit(element, options = {}) {\r\n        let el = null;\r\n        if (typeof element === \"string\") {\r\n            el =\r\n                document.getElementById(element) ||\r\n                document.querySelector(element);\r\n        } else if (element && (element.id || element.tagName)) {\r\n            el = element;\r\n        }\r\n        if (!el) {\r\n            console.error(\"Invalid container reference: \" + el);\r\n            return null;\r\n        }\r\n        if (typeof options !== \"object\") {\r\n            console.error(\"Invalid options parameter : \" + options);\r\n            return null;\r\n        }\r\n\r\n        let editor = null;\r\n        const session = new EditSession(options.text ? options.text : \"\");\r\n        session.language = options.language ? options.language : this.language;\r\n        session.setUndoManager(new UndoManager());\r\n\r\n        const editorSettings = {\r\n            fontSize: options.fontSize || this.fontSize,\r\n            fontFamily: options.fontName || this.fontName,\r\n            theme: options.theme || this.theme,\r\n            showLineNumbers: true,\r\n            readOnly: false,\r\n            showGutter: true,\r\n            animatedScroll: true,\r\n            minLines: 5,\r\n            maxLines: 'auto',\r\n            selectionStyle: \"row\",\r\n            highlightActiveLine: true,\r\n            showPrintMargin: true,\r\n        };\r\n\r\n        editor = ace.edit(el, Object.assign(editorSettings, options));\r\n        editor.data = options.data || {};\r\n        editor.setSession(session);\r\n        editor.renderer.setScrollMargin(10, 10, 10, 10);\r\n        editor.$blockScrolling = Infinity;\r\n        editor.setOptions({\r\n            scrollPastEnd: 0.9,\r\n            autoScrollEditorIntoView: true,\r\n        });\r\n        editor.focus();\r\n        // editor.select()\r\n        // editor.gotoLine(0)\r\n        // editor.blur(true)\r\n        // this.editor.session.selection.on('changeSelection', function(){});\r\n        // this.editor.session.selection.on('changeCursor', function(){});\r\n        this.setHighlightRule(editor, options.fileName);\r\n        this.editors.push(editor);\r\n        setTimeout(() => {\r\n            // let sel = editor.selection\r\n            // sel.clearSelection()\r\n            editor.clearSelection();\r\n        }, 0);\r\n\r\n        return editor;\r\n    }\r\n\r\n    reset() {\r\n        this.FontSize = this.defaults.fontSize;\r\n        this.FontName = this.defaults.fontName;\r\n        this.Theme = this.defaults.theme;\r\n    }\r\n    destroy() {\r\n        this.editors.forEach((editor) => {\r\n            editor.destroy();\r\n            editor.container.remove();\r\n        });\r\n    }\r\n    get ThemeList() {\r\n        return Themes;\r\n    }\r\n    set Theme(val) {\r\n        if (!val) {\r\n            console.log(\"Theme not set\");\r\n            return;\r\n        }\r\n        let theme = val && val.toLowerCase();\r\n        if (\r\n            this.Themes.dark.find(\r\n                (item) => item.toLowerCase() === theme.toLocaleLowerCase()\r\n            ) ||\r\n            this.Themes.light.find(\r\n                (item) => item.toLowerCase() === theme.toLocaleLowerCase()\r\n            )\r\n        ) {\r\n            this.theme = \"ace/theme/\" + theme.replace(/\\s+/g, \"_\");\r\n            this.editors.forEach((editor) => editor.setTheme(this.theme));\r\n        }\r\n    }\r\n    get Theme() {\r\n        return this.theme;\r\n    }\r\n    get FontName() {\r\n        return this.fontName;\r\n    }\r\n    set FontName(value) {\r\n        this.fontName = value;\r\n    }\r\n    get FontSize() {\r\n        return this.fontSize;\r\n    }\r\n    set FontSize(value) {\r\n        this.fontSize = value;\r\n    }\r\n    get Editors() {\r\n        return this.editors;\r\n    }\r\n}\r\nconst instance = new CodeEditor();\r\nObject.freeze(instance);\r\n\r\n/*  setHighlightRules (editor, language) {\r\n    const lang = language || 'text'\r\n    const session = editor.session\r\n    editor.session.setMode('ace/mode/' + lang, function () {\r\n    const rules = session.$mode.$highlightRules.getRules()\r\n      for (let stateName in rules) {\r\n        if (Object.prototype.hasOwnProperty.call(rules, stateName)) {\r\n          rules[stateName].unshift({\r\n            token: 'keyword',\r\n            regex: /TITLE/,\r\n          }, {\r\n            token: 'constant',\r\n            regex: /GOAL/,\r\n          })\r\n        }\r\n      }\r\n      // console.log(session.$mode)\r\n      // force recreation of tokenizer\r\n      session.$mode.$tokenizer = null\r\n      session.bgTokenizer.setTokenizer(session.$mode.getTokenizer())\r\n      // force re-highlight whole document\r\n      session.bgTokenizer.start(0)\r\n    })\r\n  } */\r\nexport default instance;\r\n","function autoImplementedMode (filename) {\r\n  var ext = filename.split('.').pop()\r\n  var prefix = \"ace/mode/\"\r\n\r\n  if (!ext) {\r\n    return prefix + \"text\"\r\n  }\r\n\r\n  /**\r\n   *  Functional, but inefficient if you want to write it by yourself ....\r\n   */\r\n  switch (ext) {\r\n    case \"js\":\r\n      return prefix + \"javascript\"\r\n    case \"json\":\r\n      return prefix + \"json\"\r\n    default: 'text'\r\n  }\r\n}\r\n\r\n\r\n// var filename = \"myfile.js\"\r\n// In this case \"ace/mode/javascript\"\r\n// var mode = autoImplementedMode(filename)\r\n// editor.getSession().setMode(mode)\r\nexport default autoImplementedMode\r\n"],"names":["ace","window","Range","EditSession","UndoManager","TextHighlightRules","require","TextMode","Mode","BaseFoldMode","FoldMode","TokenIterator","Themes","light","dark","Rules","init","wrapper","HighlightRules","constructor","language","super","this","keywords","rules","setLanguage","getRules","start","token","regex","next","split","join","value","found","keywordEntries","find","entry","toLowerCase","RegExp","caseInsensitive","qstring","defaultToken","string","comment","getKeywords","Error","Object","entries","$rules","normalizeRules","fold","en","foldingStartMarker","foldingStopMarker","foldingStopMenu","fr","getFoldWidgetRange","session","_foldStyle","row","lang","line","getLine","match","position","column","length","iterator","getCurrentToken","seek","currentRow","getCurrentTokenRow","fromPoints","getCurrentTokenColumn","stepForward","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","editor","watch","lineCommentStart","blockComment","end","$highlightRules","$id","foldingRules","DefaultFoldMode","on","async","_this","getValue","errors","parse","clearAnnotations","setAnnotations","e","console","log","onlyHighlight","CodeEditor","instance","editors","defaults","fontSize","fontName","theme","setHighlightRule","fileName","ext","substring","indexOf","defaultMode","ResourceMode","modePath","filename","pop","prefix","dynamicMode","DynamicMode","setMode","bgTokenizer","edit","element","options","el","document","getElementById","querySelector","id","tagName","error","text","setUndoManager","assign","fontFamily","showLineNumbers","readOnly","showGutter","animatedScroll","minLines","maxLines","selectionStyle","highlightActiveLine","showPrintMargin","data","setSession","renderer","setScrollMargin","$blockScrolling","Infinity","setOptions","scrollPastEnd","autoScrollEditorIntoView","focus","push","clearSelection","reset","FontSize","FontName","Theme","destroy","forEach","container","remove","ThemeList","val","item","toLocaleLowerCase","replace","setTheme","Editors","freeze"],"mappings":"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"}